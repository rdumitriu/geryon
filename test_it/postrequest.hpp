//
// GENERATED by ll1gen : Do not modify (or on your own risk)
//
#ifndef _LL1GEN_POSTREQUEST_HPP_
#define _LL1GEN_POSTREQUEST_HPP_

#include "json_utils.hpp"

//ll1gen::include_begin

//ll1gen::include_end

namespace geryon { namespace test { 

class PostRequest {
public:
    //ll1gen::constructor_begin

    //ll1gen::constructor_end
    PostRequest() {}
    ~PostRequest() {}

#ifndef LL1GEN_DISABLE_STANDARD_GETTERS
    //ll1gen::getters_begin

    
    std::string get_msg() const { return _msg; }

    void set_msg( const std::string & __val) { _msg = __val; }



    std::vector<std::string>  get_other_msgs() const { return _other_msgs; }

    void set_other_msgs( const std::vector<std::string>  & __val) { _other_msgs = __val; }



    std::shared_ptr<bool>  get_do_something() const { return _do_something; }

    void set_do_something(  std::shared_ptr<bool>   __val) { _do_something = __val; }


//ll1gen::getters_end
#endif

#ifndef LL1GEN_DISABLE_REFERENCE_GETTERS
    //ll1gen::ref_getters_begin

        std::string & msg() { return _msg; }


    std::vector<std::string>  & other_msgs() { return _other_msgs; }


    std::shared_ptr<bool>  & do_something() { return _do_something; }


//ll1gen::ref_getters_end
#endif

    friend std::ostream& operator<< (std::ostream& __stream, const PostRequest& __bean);
    friend std::istream& operator>> (std::istream& __stream, PostRequest& __bean);
private:
    //ll1gen::field_decl_begin

    std::string _msg;
std::vector<std::string>  _other_msgs;
std::shared_ptr<bool>  _do_something;
//ll1gen::field_decl_end
};

std::ostream& operator<< (std::ostream& __stream, const PostRequest& __bean) {
    __stream << "{";
    //ll1gen::field_ostream_begin

        __stream << "\"msg\":\"" << ll1gen::json::detail::encodeJsonString(__bean._msg) << "\"";


__stream << ",";
    __stream << "\"other_msgs\":";
    ll1gen::json::serializeVector(__stream, __bean._other_msgs);


__stream << ",";
    if(__bean._do_something.get()) {
        __stream << "\"do_something\":" << (*(__bean._do_something) ? "true" : "false");
    } else {
        __stream << "\"do_something\": null";
    }


//ll1gen::field_ostream_end
    __stream << "}";
    return __stream;
}

std::istream& operator>> (std::istream& __stream, PostRequest& __bean) {
    char __startObjectMrk = ll1gen::json::detail::lookUpAndEat(__stream, "{n");
    if(__startObjectMrk == 'n') {
        ll1gen::json::detail::lookUpTokenRemainder(__stream, __startObjectMrk, "null");
        return __stream;
    }
    for(unsigned int __i = 0; __i < 3; ++__i) {
        ll1gen::json::detail::lookUpAndEat(__stream, "\"");
        std::string __propertyName = ll1gen::json::detail::lookUp(__stream, "\"");
        ll1gen::json::detail::lookUpAndEat(__stream, ":");

        //ll1gen::field_istream_begin

            if(__propertyName == "msg") {
        if(!ll1gen::json::detail::parseString(__stream, __bean._msg)) {
            throw new std::runtime_error("JSON: null not supported for field msg (string). Check definition.");
        }
    }

else
    
    if(__propertyName == "other_msgs") {
        ll1gen::json::deserializeVector(__stream, __bean._other_msgs);
    }

else
    if(__propertyName == "do_something") {
        __bean._do_something = std::make_shared<bool>();
        if(!ll1gen::json::detail::lookUpNull(__stream)) {
            ll1gen::json::detail::parseBool(__stream, *(__bean._do_something));
        } else {
            __bean._do_something.reset();
        }
    }

//ll1gen::field_istream_end

        if('}' == ll1gen::json::detail::lookUpAndEat(__stream, "},")) {
            break;
        }
    }
    return __stream;
}

} } 

#endif
