//
// GENERATED by ll1gen : Do not modify (or on your own risk)
//
#ifndef _LL1GEN_SERVLETRESPONSE_HPP_
#define _LL1GEN_SERVLETRESPONSE_HPP_

#include "json_utils.hpp"

//ll1gen::include_begin

//ll1gen::include_end

namespace geryon { namespace test { 

class ServletResponse {
public:
    //ll1gen::constructor_begin

    //ll1gen::constructor_end
    ServletResponse() {}
    ~ServletResponse() {}

#ifndef LL1GEN_DISABLE_STANDARD_GETTERS
    //ll1gen::getters_begin

    
    bool get_ok() const { return _ok; }

    void set_ok(  bool  __val) { _ok = __val; }



    unsigned int get_code() const { return _code; }

    void set_code(  unsigned int  __val) { _code = __val; }



    std::string get_message() const { return _message; }

    void set_message( const std::string & __val) { _message = __val; }


//ll1gen::getters_end
#endif

#ifndef LL1GEN_DISABLE_REFERENCE_GETTERS
    //ll1gen::ref_getters_begin

        bool & ok() { return _ok; }


    unsigned int & code() { return _code; }


    std::string & message() { return _message; }


//ll1gen::ref_getters_end
#endif

    friend std::ostream& operator<< (std::ostream& __stream, const ServletResponse& __bean);
    friend std::istream& operator>> (std::istream& __stream, ServletResponse& __bean);
private:
    //ll1gen::field_decl_begin

    bool _ok;
unsigned int _code;
std::string _message;
//ll1gen::field_decl_end
};

std::ostream& operator<< (std::ostream& __stream, const ServletResponse& __bean) {
    __stream << "{";
    //ll1gen::field_ostream_begin

        __stream << "\"ok\":" << (__bean._ok ? "true" : "false");


__stream << ",";
    __stream << "\"code\":" << __bean._code;


__stream << ",";
    __stream << "\"message\":\"" << ll1gen::json::detail::encodeJsonString(__bean._message) << "\"";


//ll1gen::field_ostream_end
    __stream << "}";
    return __stream;
}

std::istream& operator>> (std::istream& __stream, ServletResponse& __bean) {
    char __startObjectMrk = ll1gen::json::detail::lookUpAndEat(__stream, "{n");
    if(__startObjectMrk == 'n') {
        ll1gen::json::detail::lookUpTokenRemainder(__stream, __startObjectMrk, "null");
        return __stream;
    }
    for(unsigned int __i = 0; __i < 3; ++__i) {
        ll1gen::json::detail::lookUpAndEat(__stream, "\"");
        std::string __propertyName = ll1gen::json::detail::lookUp(__stream, "\"");
        ll1gen::json::detail::lookUpAndEat(__stream, ":");

        //ll1gen::field_istream_begin

            if(__propertyName == "ok") {
        if(!ll1gen::json::detail::parseBool(__stream, __bean._ok)) {
            throw std::runtime_error("JSON: null is not supported for ok (bool). Check definition.");
        }
    }

else
    if(__propertyName == "code") {
        if(!ll1gen::json::detail::lookUpNull(__stream)) {
            __stream >> __bean._code;
        } else {
            throw std::runtime_error("JSON: null not supported for field code. Check definition");
        }
    }

else
    if(__propertyName == "message") {
        if(!ll1gen::json::detail::parseString(__stream, __bean._message)) {
            throw new std::runtime_error("JSON: null not supported for field message (string). Check definition.");
        }
    }

//ll1gen::field_istream_end

        if('}' == ll1gen::json::detail::lookUpAndEat(__stream, "},")) {
            break;
        }
    }
    return __stream;
}

} } 

#endif
