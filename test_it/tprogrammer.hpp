//
// GENERATED by ll1gen : Do not modify (or on your own risk)
//
#ifndef _LL1GEN_TPROGRAMMER_HPP_
#define _LL1GEN_TPROGRAMMER_HPP_

#include "json_utils.hpp"

//ll1gen::include_begin

//ll1gen::include_end

namespace geryon { namespace test { 

class TProgrammer {
public:
    //ll1gen::constructor_begin

    //ll1gen::constructor_end
    TProgrammer() {}
    ~TProgrammer() {}

#ifndef LL1GEN_DISABLE_STANDARD_GETTERS
    //ll1gen::getters_begin

    
    long get_id() const { return _id; }

    void set_id(  long  __val) { _id = __val; }



    std::string get_name() const { return _name; }

    void set_name( const std::string & __val) { _name = __val; }



    unsigned int get_mentalAge() const { return _mentalAge; }

    void set_mentalAge(  unsigned int  __val) { _mentalAge = __val; }



    std::string get_lang() const { return _lang; }

    void set_lang( const std::string & __val) { _lang = __val; }


//ll1gen::getters_end
#endif

#ifndef LL1GEN_DISABLE_REFERENCE_GETTERS
    //ll1gen::ref_getters_begin

        long & id() { return _id; }


    std::string & name() { return _name; }


    unsigned int & mentalAge() { return _mentalAge; }


    std::string & lang() { return _lang; }


//ll1gen::ref_getters_end
#endif

    friend std::ostream& operator<< (std::ostream& __stream, const TProgrammer& __bean);
    friend std::istream& operator>> (std::istream& __stream, TProgrammer& __bean);
private:
    //ll1gen::field_decl_begin

    long _id;
std::string _name;
unsigned int _mentalAge;
std::string _lang;
//ll1gen::field_decl_end
};

std::ostream& operator<< (std::ostream& __stream, const TProgrammer& __bean) {
    __stream << "{";
    //ll1gen::field_ostream_begin

        __stream << "\"id\":" << __bean._id;


__stream << ",";
    __stream << "\"name\":\"" << ll1gen::json::detail::encodeJsonString(__bean._name) << "\"";


__stream << ",";
    __stream << "\"mentalAge\":" << __bean._mentalAge;


__stream << ",";
    __stream << "\"lang\":\"" << ll1gen::json::detail::encodeJsonString(__bean._lang) << "\"";


//ll1gen::field_ostream_end
    __stream << "}";
    return __stream;
}

std::istream& operator>> (std::istream& __stream, TProgrammer& __bean) {
    char __startObjectMrk = ll1gen::json::detail::lookUpAndEat(__stream, "{n");
    if(__startObjectMrk == 'n') {
        ll1gen::json::detail::lookUpTokenRemainder(__stream, __startObjectMrk, "null");
        return __stream;
    }
    for(unsigned int __i = 0; __i < 4; ++__i) {
        ll1gen::json::detail::lookUpAndEat(__stream, "\"");
        std::string __propertyName = ll1gen::json::detail::lookUp(__stream, "\"");
        ll1gen::json::detail::lookUpAndEat(__stream, ":");

        //ll1gen::field_istream_begin

            if(__propertyName == "id") {
        if(!ll1gen::json::detail::lookUpNull(__stream)) {
            __stream >> __bean._id;
        } else {
            throw std::runtime_error("JSON: null not supported for field id. Check definition");
        }
    }

else
    if(__propertyName == "name") {
        if(!ll1gen::json::detail::parseString(__stream, __bean._name)) {
            throw new std::runtime_error("JSON: null not supported for field name (string). Check definition.");
        }
    }

else
    if(__propertyName == "mentalAge") {
        if(!ll1gen::json::detail::lookUpNull(__stream)) {
            __stream >> __bean._mentalAge;
        } else {
            throw std::runtime_error("JSON: null not supported for field mentalAge. Check definition");
        }
    }

else
    if(__propertyName == "lang") {
        if(!ll1gen::json::detail::parseString(__stream, __bean._lang)) {
            throw new std::runtime_error("JSON: null not supported for field lang (string). Check definition.");
        }
    }

//ll1gen::field_istream_end

        if('}' == ll1gen::json::detail::lookUpAndEat(__stream, "},")) {
            break;
        }
    }
    return __stream;
}

} } 

#endif
