CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/modules/")

enable_testing ()

PROJECT (geryon)

#
# Setting the global stuff
#
SET(BUILDDIR "build")
SET(AGRADE_LIBS geryon-commons)
SET(CMAKE_INSTALL_PREFIX "geryon-home")

SET(AGRADE_INSTALL_BIN "bin")
SET(AGRADE_INSTALL_LIB "lib")
SET(AGRADE_INSTALL_DOC "doc")
SET(AGRADE_INSTALL_INCLUDE "include")
SET(AGRADE_INSTALL_PROFILES "profiles")
SET(AGRADE_INSTALL_MODULES "modules")
SET(AGRADE_INSTALL_DEPS "dependencies")
SET(AGRADE_INSTALL_TMPLPROFILE "${AGRADE_INSTALL_PROFILES}/template")
SET(AGRADE_INSTALL_SRV0PROFILE "${AGRADE_INSTALL_PROFILES}/server0")

SET(GERYON_DEBUG "true")
SET(AGRADE_GENERATE_DOCUMENTATION "false")
#SET(GERYON_TEST_COVERAGE "false")

#
# Database support
#
FIND_PACKAGE(PQXX)
IF (NOT PQXX_FOUND)
  message ("No PostgreSQL support found (need pqxx and postgres libraries).")
  SET(PQXXLIBS "")
ELSE(PQXX_FOUND)
  ADD_DEFINITIONS(-DG_HAS_PQXX)
  message ("Found PostgreSQL PQXX library, include dirs: ${PQXX_INCLUDE_DIRECTORIES}")
  INCLUDE_DIRECTORIES ( ${INCLUDE_DIRECTORIES} "${PQXX_INCLUDE_DIRECTORIES}" "${POSTGRES_INCLUDE_DIRECTORIES}")
  SET(PQXXLIBS ${PQXX_LIBRARIES} ${POSTGRES_LIBRARIES})
ENDIF(NOT PQXX_FOUND)


SET(DBLIBS ${PQXXLIBS})

#
# Versioning
#
SET(GERYON_SERVER_BUILD_VERSION_MAJOR "0")
SET(GERYON_SERVER_BUILD_VERSION_MINOR "1")
SET(GERYON_SERVER_BUILD_IDENTIFICATION "20140731")


#
# Compiling
#
#-Weffc++
SET( AGRADE_GLOBAL_CXX_FLAGS "-Wall -Wold-style-cast -Woverloaded-virtual -Wl,-E -std=c++0x" )

ADD_DEFINITIONS(-D_GLIBCXX_USE_NANOSLEEP)


IF(UNIX)
  SET(LIBS "-ldl -lpthread")
  IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
    LINK_DIRECTORIES("/usr/lib64"
                     "/usr/local/lib64")
    SET( AGRADE_GLOBAL_CXX_FLAGS "${AGRADE_GLOBAL_CXX_FLAGS} -m64 -fPIC")
  ELSE()
    LINK_DIRECTORIES("/usr/lib"
                     "/usr/local/lib")
    SET( AGRADE_GLOBAL_CXX_FLAGS "${AGRADE_GLOBAL_CXX_FLAGS} -m32 -fPIC")
  ENDIF()
ELSE(NOT UNIX)
  message(FATAL_ERROR " I was only tested on LINUX. You really need to work to build me.")
ENDIF(UNIX)

#
# BOOST SUPPORT
#

set(Boost_USE_STATIC_LIBS        ON)
set(Boost_USE_MULTITHREADED      ON)
set(Boost_USE_STATIC_RUNTIME    OFF)

FIND_PACKAGE(Boost REQUIRED COMPONENTS program_options date_time signals system filesystem)

INCLUDE_DIRECTORIES ("${Boost_INCLUDE_DIR}")

SET(LIBS ${LIBS} ${Boost_LIBRARIES})


IF(DEFINED GERYON_DEBUG)
  ADD_DEFINITIONS(-D_DEBUG)
  message ("Debug version, please undefine GERYON_DEBUG if you want the release version")
 # IF(DEFINED GERYON_TEST_COVERAGE)
 #   SET( CMAKE_CXX_FLAGS "${AGRADE_GLOBAL_CXX_FLAGS} --coverage -g -O0")
 #   message ("Code coverage reports will be available via ggcov")
 # ELSE(NOT DEFINED GERYON_TEST_COVERAGE)
    SET( CMAKE_CXX_FLAGS "${AGRADE_GLOBAL_CXX_FLAGS} -g -O0")
 # ENDIF(DEFINED GERYON_TEST_COVERAGE)

ELSE (NOT DEFINED GERYON_DEBUG)
  SET( CMAKE_CXX_FLAGS "${AGRADE_GLOBAL_CXX_FLAGS} -O3")
ENDIF(DEFINED GERYON_DEBUG)

#
# Documentation
#
IF(AGRADE_GENERATE_DOCUMENTATION)

FIND_PACKAGE(Doxygen)

IF(DOXYGEN_FOUND)
  SET(DOXYGEN_INPUT "${PROJECT_BINARY_DIR}/doxy-config")
  SET(DOXYGEN_OUTPUT "${CMAKE_INSTALL_PREFIX}/doc")

  IF(NOT IS_ABSOLUTE ${DOXYGEN_OUTPUT})
    GET_FILENAME_COMPONENT(DOXYGEN_OUTPUT_TARGET "${CMAKE_BINARY_DIR}/${DOXYGEN_OUTPUT}" ABSOLUTE)
  ELSE(IS_ABSOLUTE ${DOXYGEN_OUTPUT})
    SET(DOXYGEN_OUTPUT_TARGET "${DOXYGEN_OUTPUT}")
  ENDIF(NOT IS_ABSOLUTE ${DOXYGEN_OUTPUT})

  EXECUTE_PROCESS(COMMAND ${CMAKE_COMMAND} -E make_directory ${DOXYGEN_OUTPUT_TARGET})

  CONFIGURE_FILE (
    "${PROJECT_SOURCE_DIR}/doc/doxy-config.in"
    "${PROJECT_BINARY_DIR}/doxy-config"
  )

  ADD_CUSTOM_COMMAND(
    OUTPUT ${DOXYGEN_OUTPUT}
    COMMAND ${CMAKE_COMMAND} -E echo_append "Building API Documentation..."
    COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_INPUT}
    COMMAND ${CMAKE_COMMAND} -E echo "Done."
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    DEPENDS ${DOXYGEN_INPUT}
    )

  ADD_CUSTOM_TARGET(apidoc ALL DEPENDS ${DOXYGEN_OUTPUT})

ELSE(NOT DOXYGEN_FOUND)
  message ("No doxygen found. Will not generate documentation.")
ENDIF(DOXYGEN_FOUND)

ENDIF(AGRADE_GENERATE_DOCUMENTATION)

ADD_SUBDIRECTORY ("commons")
ADD_SUBDIRECTORY ("server")
ADD_SUBDIRECTORY ("example")

INSTALL(DIRECTORY DESTINATION ${AGRADE_INSTALL_BIN})
INSTALL(DIRECTORY DESTINATION ${AGRADE_INSTALL_DOC})
INSTALL(DIRECTORY DESTINATION ${AGRADE_INSTALL_LIB})
INSTALL(DIRECTORY DESTINATION ${AGRADE_INSTALL_MODULES})
INSTALL(DIRECTORY DESTINATION ${AGRADE_INSTALL_INCLUDE})
INSTALL(DIRECTORY DESTINATION ${AGRADE_INSTALL_DEPS})
INSTALL(DIRECTORY DESTINATION ${AGRADE_INSTALL_PROFILES})
INSTALL(DIRECTORY DESTINATION ${AGRADE_INSTALL_TMPLPROFILE})
INSTALL(DIRECTORY DESTINATION ${AGRADE_INSTALL_SRV0PROFILE})
INSTALL(DIRECTORY DESTINATION "${AGRADE_INSTALL_SRV0PROFILE}/etc")
INSTALL(DIRECTORY DESTINATION "${AGRADE_INSTALL_SRV0PROFILE}/log")
INSTALL(FILES ${CMAKE_SOURCE_DIR}/etc/server.conf
        DESTINATION "${AGRADE_INSTALL_TMPLPROFILE}")
INSTALL(FILES ${CMAKE_SOURCE_DIR}/etc/server.conf
        DESTINATION "${AGRADE_INSTALL_SRV0PROFILE}/etc")

FILE(INSTALL ${CMAKE_SOURCE_DIR}/etc/startServer.sh
        DESTINATION ${CMAKE_INSTALL_PREFIX}/${AGRADE_INSTALL_BIN}
        FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
FILE(INSTALL ${CMAKE_SOURCE_DIR}/etc/stopServer.sh
        DESTINATION ${CMAKE_INSTALL_PREFIX}/${AGRADE_INSTALL_BIN}
        FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
FILE(INSTALL ${CMAKE_SOURCE_DIR}/etc/serverStatus.sh
        DESTINATION ${CMAKE_INSTALL_PREFIX}/${AGRADE_INSTALL_BIN}
        FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)

