CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

enable_testing ()

PROJECT (geryon)

#
# Setting the global stuff
#
SET(BUILDDIR "build")
SET(AGRADE_LIBS geryon-commons)
SET(CMAKE_INSTALL_PREFIX "geryon-home")

SET(AGRADE_INSTALL_BIN "bin")
SET(AGRADE_INSTALL_LIB "lib")
SET(AGRADE_INSTALL_INCLUDE "include")
SET(AGRADE_INSTALL_PROFILES "profiles")
SET(AGRADE_INSTALL_TMPLPROFILE "${AGRADE_INSTALL_PROFILES}/template")

SET(GERYON_DEBUG "true")

#
# Versioning
#
SET(GERYON_SERVER_BUILD_VERSION_MAJOR "0")
SET(GERYON_SERVER_BUILD_VERSION_MINOR "1")
SET(GERYON_SERVER_BUILD_IDENTIFICATION "20140528")

#-Weffc++
SET( AGRADE_GLOBAL_CXX_FLAGS "-Wall -Wold-style-cast -Woverloaded-virtual -Wl,-E -std=c++0x" )

ADD_DEFINITIONS(-D_GLIBCXX_USE_NANOSLEEP)


IF(UNIX)
  SET(LIBS "-ldl -lpthread")
  IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
    LINK_DIRECTORIES("/usr/lib64"
                     "/usr/local/lib64")
    SET( AGRADE_GLOBAL_CXX_FLAGS "${AGRADE_GLOBAL_CXX_FLAGS} -m64 -fPIC")
  ELSE()
    LINK_DIRECTORIES("/usr/lib"
                     "/usr/local/lib")
    SET( AGRADE_GLOBAL_CXX_FLAGS "${AGRADE_GLOBAL_CXX_FLAGS} -m32 -fPIC")
  ENDIF()
ELSE(NOT UNIX)
  message(FATAL_ERROR " I was only tested on LINUX. You really need to work to build me.")
ENDIF(UNIX)

#
# BOOST SUPPORT
#

set(Boost_USE_STATIC_LIBS        ON)
set(Boost_USE_MULTITHREADED      ON)
set(Boost_USE_STATIC_RUNTIME    OFF)

FIND_PACKAGE(Boost REQUIRED COMPONENTS program_options date_time signals system filesystem)

INCLUDE_DIRECTORIES ("${Boost_INCLUDE_DIR}")

SET(LIBS ${LIBS} ${Boost_LIBRARIES})


IF(DEFINED GERYON_DEBUG)
  ADD_DEFINITIONS(-D_DEBUG)
  SET( CMAKE_CXX_FLAGS "${AGRADE_GLOBAL_CXX_FLAGS} -g")
  message ("Debug version, please undefine GERYON_DEBUG if you want the release version")
ELSE (NOT DEFINED GERYON_DEBUG)
  SET( CMAKE_CXX_FLAGS "${AGRADE_GLOBAL_CXX_FLAGS} -O3")
ENDIF(DEFINED GERYON_DEBUG)

ADD_SUBDIRECTORY ("commons")
ADD_SUBDIRECTORY ("server")

INSTALL(DIRECTORY DESTINATION ${AGRADE_INSTALL_BIN})
INSTALL(DIRECTORY DESTINATION ${AGRADE_INSTALL_LIB})
INSTALL(DIRECTORY DESTINATION ${AGRADE_INSTALL_INCLUDE})
INSTALL(DIRECTORY DESTINATION ${AGRADE_INSTALL_PROFILES})
INSTALL(DIRECTORY DESTINATION ${AGRADE_INSTALL_TMPLPROFILE})
